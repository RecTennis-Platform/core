generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model affiliates {
  id                Int             @id @default(autoincrement())
  companyName       String          @map("company_name") @db.VarChar(255)
  contactPersonName String          @map("contact_person_name") @db.VarChar(255)
  phone             String
  email             String
  website           String
  taxNumber         String          @map("tax_number") @db.VarChar(255)
  description       String
  status            AffiliateStatus @default(pending)
  createdAt         DateTime        @default(now()) @map("created_at")
  updatedAt         DateTime        @updatedAt @map("updated_at")
}

model mobile_mini_apps {
  id               Int      @id @default(autoincrement())
  name             String   @unique
  code             String   @unique
  iosBundleUrl     String   @map("ios_bundle_url")
  androidBundleUrl String   @map("android_bundle_url")
  level            Int      @default(0)
  createdAt        DateTime @default(now()) @map("created_at")
  updatedAt        DateTime @updatedAt @map("updated_at")
}

model news {
  id          Int      @id @default(autoincrement())
  image       String
  title       String
  description String?
  content     String
  author      String
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
}

model groups {
  id           Int            @id @default(autoincrement())
  name         String
  language     String?
  activityZone String?        @map("activity_zone")
  description  String?
  status       GroupStatus    @default(inactive)
  startDate    DateTime?      @map("start_date")
  endDate      DateTime?      @map("end_date")
  createdAt    DateTime       @default(now()) @map("created_at")
  updatedAt    DateTime       @updatedAt @map("updated_at")
  image        String?
  boughtPackageId  String         @map("bought_package_id")
  member_ships member_ships[]
}

model posts {
  id        Int      @id @default(autoincrement())
  userId    Int      @map("user_id")
  groupId   Int      @map("group_id")
  image     String?
  content   String
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
}

model packages {
  id              Int                 @id @default(autoincrement())
  name            String
  price           Float
  duration        Int
  images          String[]
  createdAt       DateTime            @default(now()) @map("created_at")
  updatedAt       DateTime            @updatedAt @map("updated_at")
  orders          orders[]
  packageServices packages_services[]
}

model services {
  id              Int                 @id @default(autoincrement())
  name            String
  createdAt       DateTime            @default(now()) @map("created_at")
  updatedAt       DateTime            @updatedAt @map("updated_at")
  config          String
  packageServices packages_services[]
}

model packages_services {
  packageId Int      @map("package_id")
  serviceId Int      @map("service_id")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  package   packages @relation(fields: [packageId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_packages_services_packages")
  service   services @relation(fields: [serviceId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_packages_services_services")

  @@id([packageId, serviceId])
}

model orders {
  id        String      @id @default(uuid())
  userId    Int         @map("user_id")
  packageId Int         @map("package_id")
  price     Float
  status    OrderStatus @default(new)
  createdAt DateTime    @default(now()) @map("created_at")
  updatedAt DateTime    @updatedAt @map("updated_at")
  package   packages    @relation(fields: [packageId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_orders_packages")
  user      users       @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_orders_users")
}

model member_ships {
  userId    Int        @map("user_id")
  groupId   Int        @map("group_id")
  createdAt DateTime   @default(now()) @map("created_at")
  updatedAt DateTime   @updatedAt @map("updated_at")
  role      MemberRole @default(member)
  group     groups     @relation(fields: [groupId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_member_ships_groups")
  user      users      @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_member_ships_users")

  @@id([userId, groupId])
}

model users {
  id            Int            @id @default(autoincrement())
  email         String         @unique
  password      String?
  name          String
  image         String?
  refreshToken  String?        @map("refresh_token")
  resetPassword Boolean        @default(false) @map("reset_password")
  createdAt     DateTime       @default(now()) @map("created_at")
  updatedAt     DateTime       @updatedAt @map("updated_at")
  role          UserRole       @default(user)
  memberShips   member_ships[]
  orders        orders[]
}

enum AffiliateStatus {
  pending
  approved
  rejected
}

enum GroupStatus {
  active
  inactive
  expired
}

enum OrderStatus {
  new
  completed
  cancelled
}

enum UserRole {
  admin
  user
}

enum MemberRole {
  group_admin
  member
}
