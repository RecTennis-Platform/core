generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model affiliates {
  id                Int             @id @default(autoincrement())
  companyName       String          @map("company_name") @db.VarChar(255)
  contactPersonName String          @map("contact_person_name") @db.VarChar(255)
  phone             String
  email             String
  website           String
  taxNumber         String          @map("tax_number") @db.VarChar(255)
  description       String
  status            AffiliateStatus @default(pending)
  createdAt         DateTime        @default(now()) @map("created_at")
  updatedAt         DateTime        @updatedAt @map("updated_at")
}

model mobile_mini_apps {
  id               Int      @id @default(autoincrement())
  name             String   @unique
  code             String   @unique
  iosBundleUrl     String   @map("ios_bundle_url")
  androidBundleUrl String   @map("android_bundle_url")
  level            Int      @default(0)
  createdAt        DateTime @default(now()) @map("created_at")
  updatedAt        DateTime @updatedAt @map("updated_at")
}

model news {
  id          Int      @id @default(autoincrement())
  image       String
  title       String
  description String?
  content     String
  author      String
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
}

model groups {
  id                      Int                       @id @default(autoincrement())
  name                    String
  language                String?
  activityZone            String?                   @map("activity_zone")
  description             String?
  status                  GroupStatus               @default(active)
  createdAt               DateTime                  @default(now()) @map("created_at")
  updatedAt               DateTime                  @updatedAt @map("updated_at")
  image                   String?
  purchasedPackageId      String                    @map("purchased_package_id")
  maxMembers              Int                       @map("max_member")
  fund                    fund[]
  group_tournaments       group_tournaments[]
  member_ships            member_ships[]
  tournament_payment_info tournament_payment_info[]
}

model posts {
  id        Int      @id @default(autoincrement())
  userId    String   @map("user_id") @db.Uuid
  groupId   Int      @map("group_id")
  image     String?
  content   String
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  user      users    @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_post_users")
}

model advertisements {
  id                 String              @id @default(uuid())
  userId             String              @map("user_id") @db.Uuid
  image              String?
  content            String
  status             AdvertisementStatus @default(pending)
  purchasedPackageId String              @map("purchased_package_id")
  createdAt          DateTime            @default(now()) @map("created_at")
  updatedAt          DateTime            @updatedAt @map("updated_at")
  title              String
  website            String?
  user               users               @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_adv_users")
}

model packages {
  id              Int                 @id @default(autoincrement())
  name            String
  price           Float
  duration        Int
  images          String[]
  createdAt       DateTime            @default(now()) @map("created_at")
  updatedAt       DateTime            @updatedAt @map("updated_at")
  description     String?
  features        String[]
  orders          orders[]
  packageServices packages_services[]
}

model services {
  id              Int                 @id @default(autoincrement())
  name            String
  createdAt       DateTime            @default(now()) @map("created_at")
  updatedAt       DateTime            @updatedAt @map("updated_at")
  config          String
  type            String?
  level           String?
  packageServices packages_services[]
}

model packages_services {
  packageId Int      @map("package_id")
  serviceId Int      @map("service_id")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  package   packages @relation(fields: [packageId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_packages_services_packages")
  service   services @relation(fields: [serviceId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_packages_services_services")

  @@id([packageId, serviceId])
}

model orders {
  id        String          @id @default(uuid())
  userId    String          @map("user_id") @db.Uuid
  packageId Int             @map("package_id")
  price     Float
  status    OrderStatus     @default(new)
  createdAt DateTime        @default(now()) @map("created_at")
  updatedAt DateTime        @updatedAt @map("updated_at")
  partner   PartnerPayment?
  package   packages        @relation(fields: [packageId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_orders_packages")
  user      users           @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_orders_users")
}

model member_ships {
  userId    String     @map("user_id") @db.Uuid
  groupId   Int        @map("group_id")
  createdAt DateTime   @default(now()) @map("created_at")
  updatedAt DateTime   @updatedAt @map("updated_at")
  role      MemberRole @default(member)
  group     groups     @relation(fields: [groupId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_member_ships_groups")
  user      users      @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_member_ships_users")

  @@id([userId, groupId])
}

model users {
  id                           String                           @id @default(uuid()) @db.Uuid
  email                        String                           @unique
  password                     String?
  name                         String
  image                        String?
  refreshToken                 String?                          @map("refresh_token")
  resetPassword                Boolean                          @default(false) @map("reset_password")
  createdAt                    DateTime                         @default(now()) @map("created_at")
  updatedAt                    DateTime                         @default(now()) @updatedAt @map("updated_at")
  role                         UserRole                         @default(user)
  gender                       Gender
  dob                          DateTime?
  phoneNumber                  String?                          @map("phone_number")
  elo                          Int?
  fcmToken                     String?                          @map("fcm_token")
  isReferee                    Boolean                          @default(false) @map("is_referee")
  advertisements               advertisements[]
  groupTournamentRegistrations group_tournament_registrations[]
  matches                      matches[]
  memberShips                  member_ships[]
  orders                       orders[]
  posts                        posts[]
  referees_group_tournaments   referees_group_tournaments[]
  referees_tournaments         referees_tournaments[]
  team1                        teams[]                          @relation("user1")
  team2                        teams[]                          @relation("user2")
  tournamentRegistration1      tournament_registrations[]       @relation("user1")
  tournamentRegistration2      tournament_registrations[]       @relation("user2")
  followMatches                users_follow_matches[]
}

model tournaments {
  id                       Int                        @id @default(autoincrement())
  purchasedPackageId       String                     @map("purchased_package_id")
  name                     String
  maxParticipants          Int                        @map("max_participants")
  gender                   Gender?
  format                   TournamentFormat
  participantType          ParticipantType            @map("participant_type")
  description              String?
  playersBornAfterDate     DateTime                   @map("players_born_after_date")
  registrationDueDate      DateTime                   @map("registration_due_date")
  startDate                DateTime                   @map("start_date")
  endDate                  DateTime                   @map("end_date")
  status                   TournamentStatus           @default(upcoming)
  address                  String
  contactPersonName        String                     @map("contact_person_name")
  contactNumber            String                     @map("contact_number")
  contactEmail             String                     @map("contact_email")
  createdAt                DateTime                   @default(now()) @map("created_at")
  updatedAt                DateTime                   @updatedAt @map("updated_at")
  phase                    TournamentPhase            @default(new)
  image                    String?
  level                    Int?                       @default(1) @map("level")
  fixtures                 fixtures[]
  fund                     fund[]
  referees_tournaments     referees_tournaments[]
  teams                    teams[]
  tournament_payment_info  tournament_payment_info[]
  tournament_registrations tournament_registrations[]
}

model tournament_registrations {
  id           Int                @id @default(autoincrement())
  tournamentId Int                @map("tournament_id")
  userId1      String             @map("user_id_1") @db.Uuid
  userId2      String?            @map("user_id_2") @db.Uuid
  name         String
  message      String?
  status       RegistrationStatus
  createdAt    DateTime           @default(now()) @map("created_at")
  updatedAt    DateTime           @updatedAt @map("updated_at")
  appliedDate  DateTime?          @map("applied_date")
  seed         Int?
  tournament   tournaments        @relation(fields: [tournamentId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_tournament_registration_tournaments")
  user1        users              @relation("user1", fields: [userId1], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_user1_tournament_registration")
  user2        users?             @relation("user2", fields: [userId2], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_user2_tournament_registration")
}

model referees_tournaments {
  tournamentId Int         @map("tournament_id")
  refereeId    String      @map("referee_id") @db.Uuid
  createdAt    DateTime    @default(now()) @map("created_at")
  updatedAt    DateTime    @updatedAt @map("updated_at")
  tournament   tournaments @relation(fields: [tournamentId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_referees_tournaments_tournaments")
  referee      users       @relation(fields: [refereeId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_referees_tournaments_users")

  @@id([tournamentId, refereeId])
}

model referees_group_tournaments {
  groupTournamentId Int               @map("group_tournament_id")
  refereeId         String            @map("referee_id") @db.Uuid
  createdAt         DateTime          @default(now()) @map("created_at")
  updatedAt         DateTime          @updatedAt @map("updated_at")
  tournament        group_tournaments @relation(fields: [groupTournamentId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_referees_tournaments_group_tournaments")
  referee           users             @relation(fields: [refereeId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_referees_tournaments_users")

  @@id([groupTournamentId, refereeId])
}

model group_tournaments {
  id                             Int                              @id @default(autoincrement())
  groupId                        Int                              @map("group_id")
  name                           String
  description                    String
  image                          String
  format                         GroupTournamentFormat
  status                         GroupTournamentStatus            @default(upcoming)
  phase                          GroupTournamentPhase             @default(new)
  startDate                      DateTime                         @map("start_date")
  endDate                        DateTime                         @map("end_date")
  address                        String
  createdAt                      DateTime                         @default(now()) @map("created_at")
  updatedAt                      DateTime                         @updatedAt @map("updated_at")
  maxParticipants                Int                              @default(50) @map("max_participants")
  fixtures                       fixtures[]
  fund                           fund[]
  group_tournament_registrations group_tournament_registrations[]
  group                          groups                           @relation(fields: [groupId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_group_tournaments_groups")
  referees_group_tournaments     referees_group_tournaments[]
  teams                          teams[]
  tournament_payment_info        tournament_payment_info[]
}

model group_tournament_registrations {
  groupTournamentId Int               @map("group_tournament_id")
  userId            String            @map("user_id") @db.Uuid
  createdAt         DateTime          @default(now()) @map("created_at")
  updatedAt         DateTime          @updatedAt @map("updated_at")
  groupTournament   group_tournaments @relation(fields: [groupTournamentId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_group_tournament_registrations_group_tournaments")
  user              users             @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_group_tournament_registrations_users")

  @@id([groupTournamentId, userId])
}

model fixtures {
  id                    String             @id @default(uuid())
  tournamentId          Int?               @map("tournament_id")
  numberOfParticipants  Int                @map("number_of_participants")
  fixtureStartDate      DateTime           @map("fixture_start_date")
  fixtureEndDate        DateTime           @map("fixture_end_date")
  status                FixtureStatus      @default(draft)
  matchDuration         Int                @map("match_duration")
  breakDuration         Int                @map("break_duration")
  createdAt             DateTime           @default(now()) @map("created_at")
  updatedAt             DateTime           @updatedAt @map("updated_at")
  numberOfGroups        Int?               @map("number_of_groups")
  matchesEndTime        String?            @map("matches_end_time")
  matchesStartTime      String             @map("matches_start_time")
  venue                 String?
  groupTournamentId     Int?               @map("group_tournament_id")
  numberOfKnockoutTeams Int?               @map("number_of_knockout_teams")
  groupTournament       group_tournaments? @relation(fields: [groupTournamentId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_fixtures_group_tournaments")
  tournament            tournaments?       @relation(fields: [tournamentId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_fixtures_tournaments")
  groupFixtures         group_fixtures[]
}

model group_fixtures {
  id                 String             @id @default(uuid())
  fixtureId          String             @map("fixture_id")
  groupWinnerId      Int[]              @map("group_winner_id")
  isFinal            Boolean            @map("is_final")
  createdAt          DateTime           @default(now()) @map("created_at")
  updatedAt          DateTime           @updatedAt @map("updated_at")
  numberOfProceeders Int?               @map("number_of_proceeders")
  status             GroupFixtureStatus @default(scheduled)
  title              String
  fixture            fixtures           @relation(fields: [fixtureId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_fixture_groups_fixtures")
  matches1           matches[]          @relation("groupFixture1")
  matches2           matches[]          @relation("groupFixture2")
  rounds             rounds[]
  teams              teams[]
}

model rounds {
  id             String         @id @default(uuid())
  groupFixtureId String         @map("group_fixture_id")
  elo            Int            @map("elo")
  createdAt      DateTime       @default(now()) @map("created_at")
  updatedAt      DateTime       @updatedAt @map("updated_at")
  title          String
  matches        matches[]
  fixture        group_fixtures @relation(fields: [groupFixtureId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_fixture_groups_rounds")
}

model teams {
  id                String             @id @default(uuid())
  name              String?
  userId1           String             @map("user_id_1") @db.Uuid
  userId2           String?            @map("user_id_2") @db.Uuid
  totalElo          Int?               @map("total_elo")
  point             Int?               @default(0)
  createdAt         DateTime           @default(now()) @map("created_at")
  updatedAt         DateTime           @updatedAt @map("updated_at")
  tournamentId      Int?               @map("tournament_id")
  groupFixtureId    String?            @map("group_fixture_id")
  seed              Int?
  groupTournamentId Int?               @map("group_tournament_id")
  fund              fund[]
  games             games[]
  matches1          matches[]          @relation("team1")
  matches2          matches[]          @relation("team2")
  matchesWinner     matches[]          @relation("teamWinner")
  scores            scores[]
  sets              sets[]
  group_fixture     group_fixtures?    @relation(fields: [groupFixtureId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_group_fixture_teams")
  groupTournament   group_tournaments? @relation(fields: [groupTournamentId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_teams_group_tournaments")
  user1             users              @relation("user1", fields: [userId1], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_user1_teams")
  user2             users?             @relation("user2", fields: [userId2], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_user2_teams")
  tournaments       tournaments?       @relation(fields: [tournamentId], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model matches {
  id                  String                 @id @default(uuid())
  roundId             String                 @map("round_id")
  groupFixtureTeamId1 String?                @map("group_fixture_team_id_1")
  groupFixtureTeamId2 String?                @map("group_fixture_team_id_2")
  rankGroupTeam1      Int?                   @map("rank_group_team1")
  rankGroupTeam2      Int?                   @map("rank_group_team2")
  teamId1             String?                @map("team_id_1")
  teamId2             String?                @map("team_id_2")
  teamWinnerId        String?                @map("team_winner_id")
  matchStartDate      DateTime?              @map("match_start_date")
  matchEndDate        DateTime?              @map("match_end_date")
  venue               String?
  status              MatchStatus            @default(scheduled)
  duration            Int?
  breakDuration       Int?                   @map("break_duration")
  createdAt           DateTime               @default(now()) @map("created_at")
  updatedAt           DateTime               @default(now()) @updatedAt @map("updated_at")
  nextMatchId         String?                @map("next_match_id")
  title               String?
  refereeId           String?                @map("referee_id") @db.Uuid
  team1MatchScore     Int                    @default(0) @map("team_1_match_score")
  team2MatchScore     Int                    @default(0) @map("team_2_match_score")
  groupFixture1       group_fixtures?        @relation("groupFixture1", fields: [groupFixtureTeamId1], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_fixture_groups_match1")
  groupFixture2       group_fixtures?        @relation("groupFixture2", fields: [groupFixtureTeamId2], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_fixture_groups_match2")
  team1               teams?                 @relation("team1", fields: [teamId1], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_match_team1")
  team2               teams?                 @relation("team2", fields: [teamId2], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_match_team2")
  teamWinner          teams?                 @relation("teamWinner", fields: [teamWinnerId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_match_team_winner")
  referee             users?                 @relation(fields: [refereeId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_match_user")
  nextMatch           matches?               @relation("nextMatch", fields: [nextMatchId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_matches_next_match")
  nextMatches         matches[]              @relation("nextMatch")
  round               rounds                 @relation(fields: [roundId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_matches_rounds")
  sets                sets[]
  followUsers         users_follow_matches[]
}

model sets {
  time          DateTime  @default(now())
  team1SetScore Int       @default(0) @map("team_1_set_score")
  team2SetScore Int       @default(0) @map("team_2_set_score")
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @default(now()) @updatedAt @map("updated_at")
  isTieBreak    Boolean   @default(false) @map("is_tie_break")
  setStartTime  DateTime  @default(now()) @map("set_start_time")
  status        SetStatus @default(not_started)
  teamWinId     String?   @map("team_win_id")
  matchId       String    @map("match_id")
  id            Int       @id @default(autoincrement())
  games         games[]
  matches       matches   @relation(fields: [matchId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_sets_matches")
  teams         teams?    @relation(fields: [teamWinId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_sets_teams")
}

model games {
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @default(now()) @updatedAt @map("updated_at")
  isTieBreak    Boolean  @default(false) @map("is_tie_break")
  teamWinId     String?  @map("team_win_id")
  id            Int      @id @default(autoincrement())
  setId         Int      @map("set_id")
  gameStartTime DateTime @default(now()) @map("game_start_time")
  sets          sets     @relation(fields: [setId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_games_sets")
  teams         teams?   @relation(fields: [teamWinId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_games_teams")
  scores        scores[]
}

model scores {
  id          Int       @id @default(autoincrement())
  type        ScoreType @default(init)
  team1Score  String    @default("0") @map("team_1_score")
  team2Score  String    @default("0") @map("team_2_score")
  time        String?
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @default(now()) @updatedAt @map("updated_at")
  teamWinId   String?   @map("team_win_id")
  gameId      Int       @map("game_id")
  teamServeId String?   @map("team_serve_id")
  games       games     @relation(fields: [gameId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_scores_games")
  teams       teams?    @relation(fields: [teamWinId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_scores_teams")
}

model users_follow_matches {
  matchId   String   @map("match_id")
  userId    String   @map("user_id") @db.Uuid
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  match     matches  @relation(fields: [matchId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_follow_matches")
  user      users    @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_matches_users")

  @@id([matchId, userId])
}

model fund {
  id                String             @id @default(uuid())
  tournamentId      Int?               @map("tournament_id")
  groupId           Int?               @map("group_id")
  teamId            String             @map("team_id")
  createdAt         DateTime           @default(now()) @map("created_at")
  updatedAt         DateTime           @updatedAt @map("updated_at")
  status            FundStatus         @default(wait)
  reminderDate      DateTime           @default(now()) @map("reminder_date")
  dueDate           DateTime           @default(now()) @map("due_date")
  message           String?            @default("") @map("message")
  errorMessage      String?            @default("") @map("error_message")
  groupTournamentId Int?               @map("group_tournament_id")
  group             groups?            @relation(fields: [groupId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_fund_group_tournaments")
  tournament        tournaments?       @relation(fields: [tournamentId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_fund_tournaments")
  team              teams              @relation(fields: [teamId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_matches_teams")
  groupTournament   group_tournaments? @relation(fields: [groupTournamentId], references: [id])
}

model tournament_payment_info {
  id                String             @id @default(uuid())
  amount            Int                @map("amount")
  unit              String             @map("unit")
  payment           String             @map("payment")
  tournamentId      Int?               @map("tournament_id")
  groupId           Int?               @map("group_id")
  groupTournamentId Int?               @map("group_tournament_id")
  dueDate           DateTime           @default(now()) @map("due_date")
  reminderDate      DateTime           @default(now()) @map("reminder_date")
  group             groups?            @relation(fields: [groupId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_payment_info_group_tournaments")
  tournament        tournaments?       @relation(fields: [tournamentId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_payment_info_tournaments")
  groupTournament   group_tournaments? @relation(fields: [groupTournamentId], references: [id])
}

enum AffiliateStatus {
  pending
  approved
  rejected
}

enum FixtureStatus {
  draft
  published
}

enum FundStatus {
  succeed
  failed
  pending
  wait
}

enum MatchStatus {
  walk_over
  scheduled
  score_done
  no_party
  no_show
  done
  skipped
}

enum GroupFixtureStatus {
  scheduled
  walk_over
  done
}

enum GroupStatus {
  active
  expired
}

enum OrderStatus {
  new
  completed
  cancelled
}

enum UserRole {
  admin
  user
}

enum MemberRole {
  group_admin
  member
}

enum Gender {
  male
  female
}

enum TournamentFormat {
  round_robin
  knockout
  group_playoff
}

enum TournamentStatus {
  on_going
  upcoming
  completed
}

enum ParticipantType {
  single
  doubles
  mixed_doubles
}

enum GroupTournamentPhase {
  new
  published
  generated_fixtures
  scored_matches
  completed
  finalized_applicants
}

enum GroupTournamentFormat {
  round_robin
  knockout
}

enum GroupTournamentStatus {
  on_going
  upcoming
  completed
}

enum TournamentPhase {
  new
  published
  finalized_applicants
  generated_fixtures
  scored_matches
  completed
}

enum RegistrationStatus {
  inviting
  canceled
  pending
  approved
  rejected
}

enum AdvertisementStatus {
  pending
  approved
  rejected
}

enum PartnerPayment {
  VNPAY
  ZALOPAY
}

enum ScoreType {
  ace
  fault
  winner
  f_error
  unf_error
  init
}

enum SetStatus {
  not_started
  on_going
  ended
}
