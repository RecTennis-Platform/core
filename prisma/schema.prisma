generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("CORE_DATABASE_URL")
}

model users {
  id             Int            @id @default(autoincrement())
  email          String         @unique
  password       String?
  name           String
  image          String?
  refresh_token  String?
  reset_password Boolean        @default(false)
  role           UserRole       @default(user)
  member_ships   member_ships[]
}

enum UserRole {
  admin
  user
}

model affiliates {
  id                Int             @id @default(autoincrement())
  companyName       String          @map("company_name") @db.VarChar(255)
  contactPersonName String          @map("contact_person_name") @db.VarChar(255)
  phone             String
  email             String
  website           String
  taxNumber         String          @map("tax_number") @db.VarChar(255)
  description       String
  status            AffiliateStatus @default(pending)
  createdAt         DateTime        @default(now()) @map("created_at")
  updatedAt         DateTime        @updatedAt @map("updated_at")
}

model mobile_mini_apps {
  id               Int      @id @default(autoincrement())
  name             String   @unique
  code             String   @unique
  iosBundleUrl     String   @map("ios_bundle_url")
  androidBundleUrl String   @map("android_bundle_url")
  level            Int      @default(0)
  createdAt        DateTime @default(now()) @map("created_at")
  updatedAt        DateTime @updatedAt @map("updated_at")
}

model news {
  id          Int      @id @default(autoincrement())
  image       String
  title       String
  description String?
  content     String
  author      String
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
}

model groups {
  id           Int            @id @default(autoincrement())
  adminId      Int            @map("admin_id")
  packageId    Int            @map("package_id")
  name         String?
  language     String?
  activityZone String?        @map("activity_zone")
  description  String?
  status       GroupStatus    @default(inactive)
  startDate    DateTime?      @map("start_date")
  endDate      DateTime?      @map("end_date")
  createdAt    DateTime       @default(now()) @map("created_at")
  updatedAt    DateTime       @updatedAt @map("updated_at")
  package      packages       @relation(fields: [packageId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_groups_packages")
  member_ships member_ships[]
  orders       orders[]
}

model posts {
  id        Int      @id @default(autoincrement())
  userId    Int      @map("user_id")
  groupId   Int      @map("group_id")
  image     String?
  content   String
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
}

model packages {
  id        Int      @id @default(autoincrement())
  name      String
  price     Float
  duration  Int
  slots     Int
  images    String[]
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  level     Int
  groups    groups[]
  orders    orders[]
}

model services {
  id        Int      @id @default(autoincrement())
  name      String
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  minLevel  Int      @map("min_level")
}

model orders {
  id        String      @id @default(uuid())
  userId    Int         @map("user_id")
  packageId Int         @map("package_id")
  groupId   Int?        @map("group_id")
  price     Float
  status    OrderStatus @default(new)
  createdAt DateTime    @default(now()) @map("created_at")
  updatedAt DateTime    @updatedAt @map("updated_at")
  group     groups?     @relation(fields: [groupId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_orders_groups")
  package   packages    @relation(fields: [packageId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_orders_packages")
}

model member_ships {
  userId    Int      @map("user_id")
  groupId   Int      @map("group_id")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  user      users    @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_member_ships_users")
  group     groups   @relation(fields: [groupId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_member_ships_groups")

  @@id([userId, groupId])
}

enum AffiliateStatus {
  pending
  approved
  rejected
}

enum GroupStatus {
  active
  inactive
  expired
}

enum OrderStatus {
  new
  completed
  cancelled
}
